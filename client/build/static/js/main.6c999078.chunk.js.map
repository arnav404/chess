{"version":3,"sources":["Screens/Play/PlayScreen.js","Components/Square/Square.js","Data/PossibleSquares.js","Data/Check.js","Components/Board/Board.js","Components/Sidebar/Sidebar.js","App.js","reportWebVitals.js","index.js"],"names":["socket","Square","props","useState","bgc","setBGC","isClicked","setIC","isPM","setPM","side","setSide","useEffect","square","parseInt","style","transform","backgroundColor","className","src","currentPiece","alt","possibleSquares","board","id","squares","selectedPiece","Math","trunc","opposingSide","charAt","moveDirection","push","directions","i","length","iterator","j","check","kingPos","includes","Board","boardRotation","setBR","possibleMoves","clickedSquare","setClicked","canCastle","map","row","Row","Col","onClick","tempBoard","one","arr","two","temp","console","log","whose","whoseMove","setWM","setBoard","canMove","possibles","verifiedMoves","it","clicked","Sidebar","formValue","setFV","formSubmitted","setFS","setRID","gameState","uuidv4","substring","toUpperCase","setGS","disabled","roomID","value","onChange","event","target","aria-describedby","placeholder","class","resignModalTitle","connectionOptions","PlayScreen","ENDPOINT","setCM","setRMT","io","on","mapOfColors","emit","room","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c999078.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Board from '../../Components/Board/Board'\nimport './PlayScreen.css'\nimport Sidebar from '../../Components/Sidebar/Sidebar'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Row, Col } from 'react-bootstrap'\nimport io from 'socket.io-client'\n\nvar connectionOptions =  {\n    \"force new connection\" : true,\n    \"reconnectionAttempts\": \"Infinity\", \n    \"timeout\" : 10000,                  \n    \"transports\" : [\"websocket\"]\n};\n\nlet socket;\n\nconst PlayScreen = () => {\n\n    const ENDPOINT = 'localhost:5555'\n\n    // Current state of the board\n    var [board, setBoard] = useState(\n        [   \n            [\"br\",\"bn\",\"bb\",\"bq\",\"bk\",\"bb\",\"bn\",\"br\"],\n            [\"bp\",\"bp\",\"bp\",\"bp\",\"bp\",\"bp\",\"bp\",\"bp\"],\n            [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\n            [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\n            [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\n            [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\n            [\"wp\",\"wp\",\"wp\",\"wp\",\"wp\",\"wp\",\"wp\",\"wp\"],\n            [\"wr\",\"wn\",\"wb\",\"wq\",\"wk\",\"wb\",\"wn\",\"wr\"]\n        ]\n    )\n    var [whoseMove, setWM] = useState('w')\n    var [side, setSide] = useState('w')\n\n    // Can the user move\n    var [canMove, setCM] = useState(false)\n\n    var [roomID, setRID] = useState('')\n\n    const [gameState, setGS] = useState(1);\n    const [resignModalTitle, setRMT] = useState(\"Game Over!\")\n\n    // On connect to server\n    useEffect(() => {\n\n        socket = io(ENDPOINT, connectionOptions);\n\n        socket.on('boardBack', (board) => {\n            setBoard(board.board)\n            setWM(board.whoseMove)\n        })\n\n        socket.on('finishGame', (board) => {\n            setCM(false)\n            if(gameState!=5) {\n                setGS(5)\n            }\n            console.log(board.side)\n            if(board.side == 'b') {\n                setRMT('White wins by resignation')\n            } else {\n                setRMT('Black wins by resignation')\n            }\n        })\n\n        socket.on('gameReady', (mapOfColors) => {\n            setCM(true)\n            setGS(2)\n            setSide(mapOfColors[socket.id])\n        })\n\n    }, [ENDPOINT])\n\n    useEffect(() => {\n        socket.emit('clientJoin', {roomID: roomID})\n    }, [roomID])\n\n    useEffect(() => {\n        console.log(roomID)\n        socket.emit('board', {board: board, whoseMove: whoseMove, room: roomID})\n    }, [whoseMove])\n\n    useEffect(() => {\n        if(gameState == 5 && canMove) {\n            socket.emit('endGame', {room: roomID, side: side})\n        }\n    }, [gameState])\n\n    return (\n        <div className=\"bigdiv\">\n            <Row>\n                <div className=\"padding\">\n                    <Board canMove={canMove} board={board} setBoard={setBoard} setWM={setWM} side={side} whoseMove={whoseMove}/>\n                </div>\n                <div className=\"padding\">\n                    <Sidebar resignModalTitle={resignModalTitle} gameState={gameState} setGS={setGS} roomID={roomID} setRID={setRID}/>\n                </div>\n            </Row>\n        </div>\n    )\n}\n\nexport default PlayScreen\n","//Frontend\nimport React from 'react'\nimport { useState, useEffect } from 'react'\n\n//Styling\nimport './Square.css'\n\n// Responsible for rendering each square \nconst Square = (props) => {\n\n    // Background color and text color\n    var [bgc, setBGC] = useState(\"brown\")\n\n    // Is it clicked\n    var [isClicked, setIC] = useState(false)\n    var [isPM, setPM] = useState(false)\n    var [side, setSide] = useState(\"0deg\")\n\n    // Making props state variables\n    useEffect(() => {\n        setIC(props.isClicked)\n        setPM(props.isPM)\n        if(props.side === 'b') {\n            setSide('180deg')\n        }\n    }, [props.isClicked, props.isPM, props.side])\n\n    // Called every render\n    useEffect(() => {\n\n        // First checking if the user has clicked the square\n        if(isClicked) {\n            setBGC(\"orange\")\n        } \n\n        // Check if the square is a possible move\n        else if (isPM) {\n            setBGC(\"pink\")\n        } \n        \n        // The square has not been clicked\n        else {\n            // If the square has not been clicked, it must have a dark or light color\n            if((props.square%10 + parseInt(props.square/10)) % 2 == 0) {\n                setBGC(\"#21bc70FF\")\n            } else {\n                setBGC(\"#006940EE\")\n            }\n        }\n    }, [isClicked, isPM])\n\n    // Return statement for the square\n    return (\n        <div style={{transform: \"rotate(\"+side+\")\", backgroundColor: bgc}} className=\"square\">\n            <img className=\"piece\" src={process.env.PUBLIC_URL+'../../Assets/Pieces/'+props.currentPiece+'.svg'} alt=\"\"></img>\n        </div>\n    )\n}\n\nexport default Square\n","const possibleSquares = (board, id) => {\n\n    //The array of possible moves we want to return\n    var squares = []\n\n    //The piece that is currently selected\n    var selectedPiece = board[Math.trunc(id/10)][id%10]\n\n    //The colors\n    var opposingSide = \"b\"\n    var side = \"w\"\n    if(selectedPiece.charAt(0) === \"b\") {\n        opposingSide = \"w\"\n        side = \"b\"\n    }\n\n    //Pawns\n    if(selectedPiece.charAt(1) === 'p') {\n\n        //Determining which side we're on\n        var moveDirection = 1 * 2*(0.5-(selectedPiece.charAt(0)==='b'))\n\n        //Moving\n        try {\n\n            if(board[Math.trunc(id/10)-moveDirection][id%10] === \"\") {\n                squares.push(id-10*moveDirection)\n                if((Math.trunc(id/10) === 6 || Math.trunc(id/10) === 1) && board[Math.trunc(id/10)-2*moveDirection][id%10] === \"\") {\n                    squares.push(id-20*moveDirection)\n                }\n            } \n\n        } catch {\n            //Promotion\n            board[Math.trunc(id/10)][id%10] = side+\"q\"\n        }\n\n        //Capturing\n        try {\n            if(board[Math.trunc((id-9*moveDirection)/10)][(id-9*moveDirection)%10].charAt(0) === opposingSide) {\n                squares.push(id-9*moveDirection)\n            } if(board[Math.trunc((id-11*moveDirection)/10)][(id-11*moveDirection)%10].charAt(0) === opposingSide) {\n                squares.push(id-11*moveDirection)\n            }\n        } catch {}\n    }\n\n    //Knights\n    else if(selectedPiece.charAt(1) === 'n') {\n        var temp = [id-20+1, id-20-1, id+10+2, id-10+2, id-10-2, id+10-2, id+20-1, id+20+1, id];\n        for(const square of temp) {\n            try { if(board[Math.trunc(square/10)][square%10].charAt(0) != side) {\n                squares.push(square)\n            }} catch {}\n        }\n    } \n\n    //Bishops, rooks, queen\n    else if(selectedPiece.charAt(1) === 'r' || selectedPiece.charAt(1) === 'b' || selectedPiece.charAt(1) === 'q') {\n        //These are the directions the piece can go\n        var directions\n\n        if(selectedPiece.charAt(1) === 'r')\n            directions = [-10, 10, 1, -1]\n        if(selectedPiece.charAt(1) === 'b')\n            directions = [9, -9, 11, -11]\n        if(selectedPiece.charAt(1) === 'q')\n            directions = [-10, 10, 1, -1, 9, -9, 11, -11]\n\n        //Iterating in each direction\n        for(var i = 0; i < directions.length; i++) {\n            var iterator = directions[i]\n\n            //Loop runs until piece hits a piece. It goes in each direction.\n            try { while(board[Math.trunc((id+iterator)/10)][(id+iterator)%10].charAt(0)!==side) {\n                squares.push(id+iterator)\n                if(board[Math.trunc((id+iterator)/10)][(id+iterator)%10]!==\"\") {\n                    break;\n                }\n                iterator=iterator+directions[i]\n            } } catch {}\n        }\n    }\n\n    //King\n    else if(selectedPiece.charAt(1) === 'k') {\n        for(var i=id%10-1; i <= id%10+1; i++) {\n            for(var j=Math.trunc(id/10)-1; j <= Math.trunc(id/10)+1; j++) {\n                try {\n                    if(board[j][i].charAt(0) !== side) {\n                        squares.push(10*j+i)\n                    }\n                } catch {}\n            }\n        }\n\n        if(side == 'w'){\n\n            //Kingside\n            if(id == 74 && board[7][7] == 'wr' && board[7][5] === '' && board[7][6]=='') {\n                squares.push(76)\n            }\n\n            //Queenside\n            if(id == 74 && board[7][0] == 'wr'  && board[7][1] === '' && board[7][2]=='' && board[7][3] =='') {\n                squares.push(72)\n            }\n\n        } else {\n\n            //Kingside\n            if(id == 4 && board[0][7] == 'br' && board[0][5] === '' && board[0][6]=='') {\n                squares.push(6)\n            }\n\n            //Queenside\n            if(id == 4 && board[0][0] == 'br'  && board[0][1] === '' && board[0][2]=='' && board[0][3]=='') {\n                squares.push(2)\n            }\n\n        }\n        \n        \n    }\n\n    else {}\n\n    return squares\n\n}\n\nexport default possibleSquares","import possibleSquares from './PossibleSquares'\n\nconst check = (board, side) => {\n\n    var kingPos = 99\n\n    var opposingSide = 'b'\n    if(side == 'b') {\n        opposingSide = 'w'\n    }\n\n    for(var i=0; i<8; i++) {\n        for(var j=0; j<8; j++) {\n            if(board[i][j] === side+'k') {\n                kingPos = 10*i+j\n            }\n        }\n    }\n\n    for(var i = 0; i<8; i++) {\n        for(var j=0; j<8; j++) {\n            if(board[i][j].charAt(0) === opposingSide) {\n                if(possibleSquares(board, 10*i+j).includes(kingPos)) {\n                    return true\n                }\n            }\n        }\n    }\n\n    return false\n\n}\n\nexport default check","//Frontend\nimport React from 'react'\nimport { useState, useEffect } from 'react'\n\n//Styling\nimport './Board.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Row, Col } from 'react-bootstrap'\n\n//Components\nimport Square from '../Square/Square'\n\n//Game Logic\nimport possibleSquares from '../../Data/PossibleSquares'\nimport check from '../../Data/Check'\n\n\nconst Board = (props) => {\n\n    // Which color are you (boardRotation changes the board view)\n    var [boardRotation, setBR] = useState(\"0deg\")\n\n    // Possible moves when piece is selected\n    var [possibleMoves, setPM] = useState([])\n\n    // Current clicked square\n    var [clickedSquare, setClicked] = useState(99)\n\n    // Castle right\n    var [canCastle, setCR] = useState(true)\n\n    //Called every render\n    useEffect(() => {\n        if(props.side == 'b')\n            setBR(\"180deg\")\n    }, [props.side])\n\n    // Function is called when a square is clicked\n    const clicked = (i, j) => {\n\n        // If the square clicked is pink\n        if(possibleMoves.includes(10*i+j)) {\n\n            //We need to create a new instance of the board\n            var tempBoard = []\n            for(var one = 0; one < 8; one++) {\n                var arr = []\n                for(var two = 0; two < 8; two++) {\n                    arr.push(props.board[one][two])\n                }\n                tempBoard.push(arr)\n            }\n\n            //Let's make the move\n            var temp = tempBoard[Math.trunc(clickedSquare/10)][clickedSquare % 10]\n            tempBoard[Math.trunc(clickedSquare/10)][clickedSquare % 10] = \"\"\n            tempBoard[i][j] = temp\n\n            if(temp.charAt(1)==='k' && canCastle) {\n                canCastle = false\n                //Castle\n                if(props.side == 'w'){\n                    //Kingside\n                    if(clickedSquare == 74 && 10*i+j===76) {\n                        console.log(\"KINGSIDE\")\n                        tempBoard[7][7]=''\n                        tempBoard[7][5]='wr'\n                    }\n                    //Queenside\n                    if(clickedSquare == 74 && 10*i+j===72) {\n                        tempBoard[7][0]=''\n                        tempBoard[7][3]='wr'\n                    }\n                } else {\n                    //Kingside\n                    if(clickedSquare == 4 && 10*i+j===6) {\n                        tempBoard[0][7]=''\n                        tempBoard[0][5]='br'\n                    }\n                    //Queenside\n                    if(clickedSquare == 4 && 10*i+j===2) {\n                        tempBoard[0][0]=''\n                        tempBoard[0][3]='br'\n                    }\n                }\n            }\n\n            // Deslect all squares\n            setClicked(99)\n            setPM([])\n\n            \n            var whose = 'w'\n\n            if(props.whoseMove == 'w') {\n                whose = 'b'\n            }\n\n            props.setWM(whose)\n            props.setBoard(tempBoard)\n\n        } \n        \n        // User clicks a non-pink square\n        else if (props.canMove && props.board[i][j].charAt(0) === props.side && props.whoseMove === props.side) {\n\n            // This is the list of possible squares the selected piece can jump\n            var possibles = possibleSquares(props.board, 10*i+j)\n\n            //We need to verify that these moves are legal\n            var verifiedMoves = []\n\n            //Let's loop through each move\n            for(var it = 0; it < possibles.length; it++) {\n\n                //We need to create a new instance of the board\n                var tempBoard = []\n                for(var one = 0; one < 8; one++) {\n                    var arr = []\n                    for(var two = 0; two < 8; two++) {\n                        arr.push(props.board[one][two])\n                    }\n                    tempBoard.push(arr)\n                }\n\n                //Let's make the move\n                var temp = tempBoard[i][j]\n                tempBoard[i][j] = \"\"\n                tempBoard[Math.trunc(possibles[it]/10)][possibles[it] % 10] = temp\n\n                //Check if it is legal. If it is, add it to verifiedMoves\n                if(!check(tempBoard, props.board[i][j].charAt(0))) {\n                    console.log(\"HERE\")\n                    verifiedMoves.push(possibles[it])\n                }\n                    \n            }\n\n            //Make pink squares the verified moves\n            setPM(verifiedMoves)\n\n\n            //Set the clicked square to orange\n            setClicked(10*i+j)\n\n        } else {\n\n            //Set the clicked square to orange\n            setClicked(10*i+j)\n            setPM([])\n\n        }\n    }\n\n    return (\n        <div style={{transform: \"rotate(\"+boardRotation+\")\"}} className=\"board\">\n            {props.board.map((row, i) => {\n                return <Row>\n                    {props.board[i].map((square, j) => {\n                        return <Col className=\"nopadding\" onClick={() => clicked(i, j)} >\n                            <Square currentPiece={props.board[i][j]} \n                            side={props.side}\n                            isPM={possibleMoves.includes(10*i+j)} \n                            isClicked={(10*i+j) === clickedSquare} \n                            square={10*i+j} />\n                        </Col>})\n                    }\n                </Row>\n            })}\n        </div>\n    )\n}\n\nexport default Board\n","import React, {useState, useEffect} from 'react'\nimport './Sidebar.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { v4 as uuidv4 } from 'uuid';\n\n\nconst Sidebar = (props) => {\n\n    const [formValue, setFV] = useState('')\n    const [formSubmitted, setFS] = useState(false)\n\n    const handleChange = (event) => {\n        setFV(event.target.value)\n    }\n\n    const handleResign = () => {\n        props.setGS(5)\n    }\n\n    useEffect(() => {\n        console.log(\"PRESSSSSED\")\n        props.setRID(formValue)\n    }, [formSubmitted])\n\n    useEffect(() => {\n        if(props.gameState === 3) {\n            props.setRID(uuidv4().substring(0,8).toUpperCase())\n        }\n    }, [props.gameState])\n\n\n    if(props.gameState==1) {\n\n        return (\n            <div className=\"side\">\n                <div className=\"centered\">\n                    <h2 className=\"text\">Welcome to Chessboss</h2>\n                    <div className=\"buttondiv\">\n                        <button className=\"bigbux blue\" onClick={() => {props.setGS(3)}}>Start a Game</button>\n                    </div>\n                    <p/>\n                    <div className=\"buttondiv\">\n                        <button className=\"bigbux join\" onClick={() => {props.setGS(4)}}>Join a Game</button>\n                    </div>\n                    <p/>\n                    <div className=\"buttondiv\">\n                        <button disabled className=\"bigbux\">Play Chessboss</button>\n                    </div>\n                </div>\n            </div>\n        )\n\n    } else if (props.gameState==2) {\n\n        return (\n            <div className=\"side\">\n                <div className=\"centered\">\n                    <h2 className=\"text\">Playing...</h2>\n                    <div className=\"buttondiv\">\n                        <button onClick={() => {handleResign()}} className=\"bigbux cancel\">Resign</button>\n                    </div>\n                    <p/>\n                    <div className=\"buttondiv\">\n                        <button className=\"bigbux join\">Offer a Draw</button>\n                    </div>\n                </div>\n            </div>\n        )\n\n    } else if (props.gameState==3) {\n        return (\n            <div className=\"side\">\n                <div className=\"centered\">\n                    <h3 className=\"text\">Your code is</h3>\n                    <h2 className=\"code\">{props.roomID}</h2>\n                    <h4 className=\"instruction\">Ask your friend to join the match with the code</h4>\n                    <p/>\n                    <div className=\"buttondiv\">\n                        <button className=\"bigbux cancel\" onClick={() => {props.setGS(1)}}>Cancel Game</button>\n                    </div>\n                </div>\n            </div>\n        )\n    } else if (props.gameState==4) {\n        return (\n            <div className=\"side\">\n                <div className=\"centered\">\n\n                    <div className=\"backbutton\">\n                        <button className=\"bigbux cancel\" onClick={() => {props.setGS(1)}}>Back</button>\n                    </div>\n\n                    <h3 className=\"text\">Enter code</h3>\n                        <div className=\" textbox form-group\">\n                            <input className=\"\" value={formValue} onChange={handleChange} id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter code\"/>\n                            <small id=\"emailHelp\" class=\"form-text text-muted\">Enter your friend's join code.</small>\n                        </div>\n                        <div className=\"buttondiv\">\n                            <button onClick={() => setFS(!formSubmitted)} className=\"bigbux join\">Join</button>\n                        </div>\n                    <p/>\n                </div>\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"side\">\n                <div className=\"centered\">\n                    <h2 className=\"text\">{props.resignModalTitle}</h2>\n                    <div className=\"buttondiv\">\n                        <button onClick={() => {props.setGS(1)}} className=\"bigbux blue\">Continue</button>\n                    </div>\n                    <p/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Sidebar\n","import './App.css';\nimport PlayScreen from './Screens/Play/PlayScreen'\n\nfunction App() {\n  return (\n    <PlayScreen></PlayScreen>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}